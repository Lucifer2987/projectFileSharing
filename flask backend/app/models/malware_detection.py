import pandas as pd
from sklearn.ensemble import RandomForestClassifier
import joblib  # For saving and loading models
import os

# Path to save the trained model
MODEL_PATH = "app/models/malware_model.pkl"

def train_malware_model():
    """
    Train the malware detection model and save it to a file.
    """
    try:
        # Load the malware detection dataset
        dataset_path = 'app/datasets/malwaredetection.csv'
        df = pd.read_csv(dataset_path)
        
        if df.empty:
            raise ValueError("Dataset is empty. Please check the data source.")

        # Drop non-numeric columns (e.g., 'hash')
        if 'hash' in df.columns:
            df = df.drop(columns=['hash'])
        
        # Ensure all columns are numeric
        X = df.drop(columns=['classification'])  # Features
        y = df['classification']  # Target
        
        # Check for any non-numeric columns in X
        non_numeric_cols = X.select_dtypes(exclude=['number']).columns.tolist()
        if non_numeric_cols:
            raise ValueError(f"Non-numeric columns detected: {non_numeric_cols}. Ensure all features are numeric before training.")
        
        # Train Random Forest Classifier
        model = RandomForestClassifier(random_state=42)
        model.fit(X, y)
        
        # Save the trained model
        joblib.dump(model, MODEL_PATH)
        print(f"Model saved to {MODEL_PATH}")
        
        return "Malware detection model trained and saved successfully."
    
    except Exception as e:
        raise Exception(f"Error during model training: {str(e)}")

def load_malware_model():
    """
    Load the trained malware detection model from a file.
    """
    try:
        if os.path.exists(MODEL_PATH):
            print(f"Loading model from {MODEL_PATH}")
            return joblib.load(MODEL_PATH)
        else:
            print(f"Model file not found at {MODEL_PATH}")
            return None
    except Exception as e:
        raise Exception(f"Error loading model: {str(e)}")

def predict_malware(input_data):
    """
    Predict malware classification for the given input data.
    :param input_data: Dictionary containing features for prediction.
    :return: Predicted classification (malicious or benign)
    """
    try:
        # Load the trained model
        model = load_malware_model()
        if model is None:
            raise Exception("Malware detection model not found. Please train the model first.")
        
        # Convert input data to DataFrame and preprocess
        input_df = pd.DataFrame([input_data])
        
        # Predict the classification (benign or malicious)
        prediction = model.predict(input_df)
        return prediction[0]  # Return the predicted class (e.g., benign or malicious)
    
    except Exception as e:
        raise Exception(f"Error during malware prediction: {str(e)}")

